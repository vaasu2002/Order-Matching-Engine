name: CMake (macOS + Ubuntu)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  BUILD_DIR: ${{ github.workspace }}/build

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS: Homebrew
            if ! command -v brew >/dev/null 2>&1; then
              echo "Homebrew not found: installing..."
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
              eval "$(/opt/homebrew/bin/brew shellenv)" || true
              eval "$(/usr/local/bin/brew shellenv)" || true
            fi
            brew update
            brew list cmake >/dev/null 2>&1 || brew install cmake
            brew list ninja >/dev/null 2>&1 || brew install ninja
            brew list tinyxml2 >/dev/null 2>&1 || brew install tinyxml2
          else
            # Ubuntu
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build libtinyxml2-dev build-essential
          fi

      - name: Set build-output-dir
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ env.BUILD_DIR }}" >> "$GITHUB_OUTPUT"

      - name: Configure CMake (Ninja)
        shell: bash
        run: |
          BUILD_DIR="${{ steps.strings.outputs.build-output-dir }}"
          mkdir -p "$BUILD_DIR"
          echo "Configuring in $BUILD_DIR"
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cmake -B "$BUILD_DIR" -S "${{ github.workspace }}" \
              -G "Ninja" \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DCMAKE_C_COMPILER=clang \
              -DCMAKE_CXX_COMPILER=clang++
          else
            # Ubuntu uses default gcc/g++
            cmake -B "$BUILD_DIR" -S "${{ github.workspace }}" \
              -G "Ninja" \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          fi

      - name: Build
        shell: bash
        run: |
          BUILD_DIR="${{ steps.strings.outputs.build-output-dir }}"
          echo "Building ${BUILD_DIR} on ${{ matrix.os }}"
          JOBS="$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)"
          cmake --build "$BUILD_DIR" --config "${{ env.BUILD_TYPE }}" -- -j${JOBS}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        shell: bash
        run: |
          echo "Running ctest in $(pwd)"
          ctest --build-config ${{ env.BUILD_TYPE }} --output-on-failure
